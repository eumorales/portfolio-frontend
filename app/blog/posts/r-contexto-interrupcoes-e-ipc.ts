import { BlogPost } from "@/types/blog"

const post: BlogPost = {
  id: "r-contexto-interrupcoes-e-ipc",
  title: "Chaveamento de Contexto, Interrup√ß√µes e Comunica√ß√£o entre Processos",
  date: "Apr 3, 2025",
  readTime: "5 min read",
  language: "Portuguese",
  category: "Notes",
  year: 2025,
  excerpt: "Resumo sobre chaveamento de contexto, tratamento de interrup√ß√µes e comunica√ß√£o entre processos, baseado no livro 'Sistemas Operacionais' ‚Äì Deitel. Elaborado para revis√£o e estudos.",
  tags: ["sistemas operacionais", "contexto", "interrup√ß√µes"],
  content: `
    <p>Resumo baseado no livro <strong>"Sistemas Operacionais"</strong> de Deitel, abordando os principais conceitos de multitarefa e gerenciamento de processos.</p>

    <h2>üîÑ 1. Chaveamento de Contexto</h2>
    <ul>
      <li><strong>Troca de contexto:</strong> altern√¢ncia eficiente entre processos.</li>
      <li>Inclui salvar/restaurar registradores, contador de programa e estado do processo.</li>
      <li>O escalonador escolhe o pr√≥ximo processo; o dispatcher realiza a troca.</li>
      <li>Essencial para concorr√™ncia mesmo em CPUs com um √∫nico n√∫cleo.</li>
    </ul>

    <h2>üö® 2. Interrup√ß√µes e Seu Tratamento</h2>
    <p>Sinais que interrompem temporariamente a execu√ß√£o da CPU para tratar eventos importantes.</p>
    <ul>
      <li><strong>Hardware:</strong> teclado, disco, etc.</li>
      <li><strong>Software:</strong> chamadas de sistema.</li>
      <li><strong>Temporizador:</strong> controle de tempo/escalonamento.</li>
      <li><strong>Exce√ß√µes:</strong> falhas, erros de mem√≥ria.</li>
    </ul>
    <p>Fluxo: CPU salva estado ‚Üí identifica interrup√ß√£o ‚Üí executa tratador ‚Üí retoma execu√ß√£o.</p>

    <h2>üì° 3. Comunica√ß√£o entre Processos (IPC)</h2>
    <ul>
      <li><strong>Sinais:</strong> notifica√ß√µes como SIGKILL.</li>
      <li><strong>Troca de mensagens:</strong> via sockets ou filas.</li>
      <li><strong>Pipes:</strong> canais unidirecionais, como <code>|</code>.</li>
      <li><strong>Mem√≥ria Compartilhada:</strong> permite acesso conjunto eficiente.</li>
    </ul>

    <h2>üêß 4. Processos em Sistemas UNIX/Linux</h2>
    <ul>
      <li><code>fork()</code>: duplica um processo.</li>
      <li><code>exec()</code>: substitui o c√≥digo de um processo.</li>
      <li><code>ps aux</code>, <code>top</code>: monitoramento.</li>
      <li><code>kill -9 PID</code>: finaliza processos.</li>
    </ul>

    <h2>üß† 5. Mapa Mental</h2>
    <p>Para facilitar a visualiza√ß√£o dos t√≥picos estudados:</p>
    <p><img alt="Mapa Mental" src="https://github.com/eumorales/TrabalhoSO/blob/main/Mapa%20Mental.jpg?raw=true"/></p>

    <h2>üí° 6. Reflex√£o Final</h2>
    <p>Avan√ßos em hardware e algoritmos de escalonamento tornaram o chaveamento de contexto mais eficiente, com registradores dedicados, caches otimizados e t√©cnicas como Hyper-Threading e CPU affinity.</p>
    <p>Essas evolu√ß√µes contribuem para sistemas operacionais modernos com multitarefa mais fluida e responsiva.</p>
  `,
}

export default post

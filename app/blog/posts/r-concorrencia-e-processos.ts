import { BlogPost } from "@/types/blog"

const post: BlogPost = {
    id: "r-concorrencia-e-processos",
    title: "Revis√£o - Programa√ß√£o Concorrente, Escalonamento e Processos",
    date: "Apr 24, 2025",
    readTime: "4 min read",
    language: "Portuguese",
    category: "Notes",
    year: 2025,
    excerpt: "Resumo elaborado para a prova de Sistemas Operacionais, abordando de forma clara os principais t√≥picos sobre concorr√™ncia, threads, escalonamento e sincroniza√ß√£o ‚Äî destinado ao uso pr√≥prio.",
    tags: ["sistemas operacionais", "concorrencia", "threads", "escalonamento"],
    content: `
      <p>Resumo elaborado para a prova de Sistemas Operacionais, abordando de forma clara os principais t√≥picos sobre concorr√™ncia, threads, escalonamento e sincroniza√ß√£o ‚Äî destinado ao uso pr√≥prio.</p>

      <h2>üßµ 1. Programa√ß√£o Concorrente</h2>
      <ul>
        <li>Execu√ß√£o <strong>simult√¢nea</strong> de m√∫ltiplos fluxos.</li>
        <li>Threads compartilham mem√≥ria, com troca de contexto r√°pida.</li>
        <li>Melhora o desempenho em sistemas multiprocessados.</li>
      </ul>

      <h2>üë• 2. Processo vs. Thread</h2>
      <ul>
        <li><strong>Processo:</strong> unidade de execu√ß√£o com mem√≥ria isolada.</li>
        <li><strong>Thread:</strong> "processo leve" que compartilha mem√≥ria.</li>
        <li>Threads s√£o mais r√°pidas e eficientes para tarefas paralelas.</li>
      </ul>
      <p><strong>Modelos:</strong> N:1, 1:1, M:N.</p>

      <h2>‚ö†Ô∏è 3. Condi√ß√£o de Corrida</h2>
      <p>Ocorre quando processos acessam dados ao mesmo tempo e o resultado depende da ordem de execu√ß√£o.</p>
      <p><strong>Solu√ß√µes:</strong> sem√°foros, mutexes, monitores.</p>

      <h2>üîÅ 4. Escalonamento de Processos</h2>
      <p><strong>Preemptivo:</strong> a CPU pode ser retirada de um processo.</p>
      <p><strong>N√£o-Preemptivo:</strong> o processo libera a CPU voluntariamente.</p>
      <ul>
        <li><strong>Objetivos:</strong> maximizar CPU, minimizar tempo de espera e garantir justi√ßa.</li>
        <li><strong>Curto Prazo:</strong> escolhe o processo.</li>
        <li><strong>Dispatcher:</strong> realiza a troca de contexto.</li>
      </ul>

      <h2>üìä 5. Pol√≠ticas de Escalonamento</h2>
      <ul>
        <li><strong>FIFO:</strong> simples, pode causar esperas longas.</li>
        <li><strong>SJF:</strong> √≥timo para curtas dura√ß√µes, mas dif√≠cil prever.</li>
        <li><strong>Prioridade:</strong> risco de starvation.</li>
        <li><strong>Round Robin:</strong> bom para tempo compartilhado.</li>
        <li><strong>M√∫ltiplas Filas:</strong> separa√ß√£o por tipo de processo.</li>
        <li><strong>Aging:</strong> evita starvation elevando prioridade.</li>
      </ul>

      <h2>‚è±Ô∏è 6. M√©tricas de Desempenho</h2>
      <ul>
        <li><strong>Tempo de Espera</strong></li>
        <li><strong>Tempo de Retorno</strong></li>
        <li><strong>Tempo de Resposta</strong></li>
      </ul>

      <h2>üîê 7. Problema da Se√ß√£o Cr√≠tica</h2>
      <p>Requisitos: exclus√£o m√∫tua, progresso, espera limitada, independ√™ncia de velocidade.</p>

      <h2>üîÑ 8. Sem√°foros</h2>
      <p>Controlam o acesso com opera√ß√µes <code>P()</code> e <code>V()</code>. Podem causar deadlocks se mal utilizados.</p>

      <h2>üîí 9. Mutex</h2>
      <p>Lock bin√°rio para garantir exclus√£o m√∫tua.</p>

      <h2>üß© 10. Monitores</h2>
      <p>Estrutura de alto n√≠vel que usa <code>wait()</code> e <code>signal()</code> para sincroniza√ß√£o, comum em Java.</p>

      <h2>üõ†Ô∏è 11. T√©cnicas de Prote√ß√£o da Se√ß√£o Cr√≠tica</h2>
      <ul>
        <li>Sem√°foros</li>
        <li>Mutexes</li>
        <li>Desabilitar interrup√ß√µes</li>
        <li>Monitores</li>
      </ul>

      <h2>üõë 12. Deadlock</h2>
      <p>Condi√ß√µes de Coffman: exclus√£o m√∫tua, reten√ß√£o, n√£o-preemp√ß√£o, espera circular.</p>
      <p><strong>Estrat√©gias:</strong> preven√ß√£o, evita√ß√£o (algoritmo do banqueiro), detec√ß√£o e recupera√ß√£o.</p>

      <h2>üßØ 13. Starvation</h2>
      <p>O processo nunca √© executado. Solu√ß√£o: <strong>aging</strong>.</p>

      <h2>üíª 14. Modo Dual e System Calls</h2>
      <p>Modo usu√°rio vs. modo kernel protege os recursos.</p>
      <p><strong>System calls:</strong> fork, exec, wait, open, read, write, exit.</p>
    `,
}

export default post
